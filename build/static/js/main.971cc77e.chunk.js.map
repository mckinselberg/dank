{"version":3,"sources":["splash_logo.png","components/RandomAnimations.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RandomAnimations","props","state","animations","randomAnimation","animated","setTimeout","setState","_","sample","className","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,yC,uPCKtBC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,WAAW,CACT,SACA,QACA,QACA,aACA,QACA,YACA,QACA,OACA,SACA,QACA,WACA,eACA,eACA,gBACA,aACA,SACA,aACA,gBACA,aACA,gBACA,cACA,iBACA,WACA,cACA,UACA,UACA,eACA,WACA,mBACA,oBACA,iBACA,kBACA,QACA,SACA,SACA,aACA,aACA,cACA,WACA,cACA,cACA,eACA,aACFC,gBAAgB,KAChBC,UAAS,GAhDM,E,iFAoDE,IAAD,OAClBC,YAAW,WACT,EAAKC,SAAS,CACZH,gBAAgBI,IAAEC,OAAO,EAAKP,MAAMC,YACpCE,UAAS,MAEX,O,+BAIF,OACQ,yBAAKK,UAAS,iBAAYC,KAAKT,MAAMG,SAAW,WAAa,GAA/C,YAAqDM,KAAKT,MAAME,uB,GAhE5CQ,aC4B/BC,MAzBf,WACE,OACE,yBAAKH,UAAU,OACb,4BAAQA,UAAU,cAgBlB,kBAAC,EAAD,SCfcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.971cc77e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/splash_logo.d694dede.png\";","import React, {Component} from 'react';\r\nimport logo from '../splash_logo.png';\r\nimport { sample } from 'lodash';\r\nimport _ from 'lodash';\r\n \r\nexport default class RandomAnimations extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      animations:[\r\n        'bounce',\r\n        'flash',\r\n        'pulse',\r\n        'rubberBand',\r\n        'shake',\r\n        'headShake',\r\n        'swing',\r\n        'tada',\r\n        'wobble',\r\n        'jello',\r\n        'bounceIn',\r\n        'bounceInDown',\r\n        'bounceInLeft',\r\n        'bounceInRight',\r\n        'bounceInUp',\r\n        'fadeIn',\r\n        'fadeInDown',\r\n        'fadeInDownBig',\r\n        'fadeInLeft',\r\n        'fadeInLeftBig',\r\n        'fadeInRight',\r\n        'fadeInRightBig',\r\n        'fadeInUp',\r\n        'fadeInUpBig',\r\n        'flipInX',\r\n        'flipInY',\r\n        'lightSpeedIn',\r\n        'rotateIn',\r\n        'rotateInDownLeft',\r\n        'rotateInDownRight',\r\n        'rotateInUpLeft',\r\n        'rotateInUpRight',\r\n        'hinge',\r\n        'rollIn',\r\n        'zoomIn',\r\n        'zoomInDown',\r\n        'zoomInLeft',\r\n        'zoomInRight',\r\n        'zoomInUp',\r\n        'slideInDown',\r\n        'slideInLeft',\r\n        'slideInRight',\r\n        'slideInUp'],\r\n      randomAnimation:null,\r\n      animated:false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(()=> {\r\n      this.setState({\r\n        randomAnimation:_.sample(this.state.animations),\r\n        animated:true\r\n      })\r\n    },1000)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n            <div className={`splash ${this.state.animated ? 'animated' : ''} ${this.state.randomAnimation}`}></div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport logo from './splash_logo.png';\nimport './App.css';\nimport './animate.css';\nimport RandomAnimations from './components/RandomAnimations.js';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n        {/*\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>hi.</p>\n        <p>my name is dan kinsley. I used to play in a band called <a href=\"http://www.theunpronounceable.com\">the unpronounceable</a>. Now, I'm a web developer and classical guitarist. </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        ></a>\n        <img src={logo} className=\"logo\" alt=\"logo\" />\n        <p>hmmm</p>\n        \n        */}\n      <RandomAnimations />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}