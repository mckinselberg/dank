{"version":3,"sources":["TurnsHistory.js","Game.js","serviceWorker.js","index.js"],"names":["TurnsHistory","props","buildTurnsHistory","bind","turns","length","map","turn","i","guess","console","log","className","key","this","answer","Component","Game","state","isNewGame","solutionArr","currGuess","showDiffOptions","turnsAllowed","noOfColors","returnColors","setSolutionArr","buildGuessOptions","handleGuessOptionChange","submitGuess","compareArrays","shuffleArray","resetGame","setDiffOptions","cancelDiffOptions","resetInputs","slice","arr","arrLength","min","Math","ceil","max","floor","random","returnRandomValFromArr","push","splice","indexOf","setState","guessOpts","colors","name","onChange","value","color","e","selectName","target","getAttribute","currGuessState","preventDefault","array1","array2","guessArrFromObj","Object","values","includes","keys","alert","answerArr","shuffledAnswer","turnNo","currTurn","no","sort","every","index","guessArr","responseArr","j","self","setTimeout","data","FormData","get","onlyNumbers","test","document","getElementsByName","onSubmit","ref","colorInput","turnsInput","onClick","style","marginTop","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8103cfef.chunk.js","sourcesContent":["import React, {Component} from 'react';\n \nexport default class TurnsHistory extends Component {\n  constructor(props) {\n    super(props)\n    this.buildTurnsHistory = this.buildTurnsHistory.bind(this);\n  }\n  buildTurnsHistory(turns){\n    if (turns.length > 0) {\n      turns.map(function(turn,i) {\n        return (\n        <ul>\n          {turn.guess.map(function(guess,i) {\n            console.log(guess);\n            return <li className={guess} key={i}>{i}</li>\n          })}\n        </ul>\n        )\n      })\n    } else {\n      return null\n    }\n  }\n \n  render(){\n    //return this.buildTurnsHistory(this.props.turns)\n    if (this.props.turns.length > 0) {\n      return (\n        this.props.turns.map(function(turn,i) {\n          return (\n            <div className=\"row\" key={i}>\n              <h2 key={`turn-${i}`}>{i+1}</h2>\n              <ul key={`guess-${i}`} className=\"guesses\">\n                {turn.guess.map(function(guess,i) {\n                  //console.log(guess);\n                  return <li className={guess} key={i}>{guess}</li>\n                })}\n              </ul>\n              <ul className=\"answer\" key={`answer-${i}`}>\n                {turn.answer.map(function(answer,i){\n                  return <li className={answer} key={i}>{answer}</li>\n                })}\n              </ul>\n            </div>\n          );\n        })\n      );\n    } else {\n      return null\n    }\n  }\n}","import React, {Component} from 'react';\nimport TurnsHistory from './TurnsHistory.js';\nimport './App.css';\n \nexport default class Game extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isNewGame:true,\n      solutionArr: [],\n      currGuess: {},\n      turns:[],\n      showDiffOptions:false,\n      turnsAllowed:8,\n      noOfColors:6\n      /*\n      turns: [{\n        no:0,\n        guess:[],\n        answer:[]\n      }]\n      */\n    }\n    \n    //method bindings\n    this.returnColors = this.returnColors.bind(this);\n    this.setSolutionArr = this.setSolutionArr.bind(this);\n    this.buildGuessOptions = this.buildGuessOptions.bind(this);\n    this.handleGuessOptionChange = this.handleGuessOptionChange.bind(this);\n    this.submitGuess = this.submitGuess.bind(this);\n    this.compareArrays = this.compareArrays.bind(this);\n    this.shuffleArray = this.shuffleArray.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n    this.showDiffOptions = this.showDiffOptions.bind(this);\n    this.setDiffOptions = this.setDiffOptions.bind(this);\n    this.cancelDiffOptions = this.cancelDiffOptions.bind(this);\n    this.resetInputs = this.resetInputs.bind(this);\n  }\n  returnColors() {\n    return ['purple','green','blue','orange','yellow','salmon','aqua','maroon'].slice(0,this.state.noOfColors);\n  }\n \n  returnRandomValFromArr(arr) {\n    let arrLength = arr.length - 1;\n    let min = Math.ceil(0);\n    let max = Math.floor(arrLength);\n    return arr[Math.floor(Math.random() * (max - min + 1)) + min];\n  }\n  setSolutionArr() {\n    let arr = this.returnColors().slice(0);\n    let solutionArr = [];\n    for (let i = 0; i < 4; i++) {\n      let random = this.returnRandomValFromArr(arr);\n      solutionArr.push(random);\n      arr.splice(arr.indexOf(random), 1)\n    }\n    this.setState({solutionArr:solutionArr})\n  }\n  buildGuessOptions() {\n    let guessOpts = [];\n    let colors = this.returnColors().slice(0);\n    \n    for (let i = 0; i < 4; i++) {\n      guessOpts.push(\n        <select name={i} key={i} onChange={this.handleGuessOptionChange} className={this.state.currGuess[i]}>\n          <option className=\"white\" value=\"empty\"></option>\n          <option className=\"none\" value=\"none\">none</option>\n          {colors.map(function(color,i) {\n            return <option className={color} key={i} value={color}>{color}</option>\n          })}\n        </select>\n      )\n    }\n    /*\n    for (let i = 0; i < 4; i++) {\n      guessOpts.push(\n        <div key={i} className={`custom-select ${this.state.currGuess[i]}`}>\n          {colors.map(function(color,i) {\n            return <div key={i} className={color}></div>\n          })}\n        </div>\n      )\n    }\n    */\n    return guessOpts;\n  }\n  handleGuessOptionChange(e) {\n    let selectName = e.target.getAttribute('name');\n    let currGuessState = this.state.currGuess;\n    //console.log(currGuessState);\n    //record the guess as an object in state\n    //if (e.target.value !== \"\") {\n      this.setState({\n        currGuess:{\n          ...currGuessState,\n          ...{[selectName] : e.target.value}\n        }\n      })\n    //}\n  }\n  submitGuess(e) {\n    e.preventDefault();\n \n    //if (Object.keys(this.state.currGuess).length < 4) {\n      let guessArrFromObj = Object.values(this.state.currGuess);\n    \n    if (guessArrFromObj.includes(\"empty\") || Object.keys(this.state.currGuess).length < 4) {\n      alert('Please select 4 colors');\n    } else {\n      //convert guess object to an array\n      let answerArr = this.compareArrays(this.state.solutionArr,guessArrFromObj);\n      let shuffledAnswer = this.shuffleArray(answerArr);\n      let turnNo = Object.keys(this.state.turns).length || 0;\n      let currTurn = {\n        no: turnNo,\n        guess: guessArrFromObj,\n        answer: shuffledAnswer\n      };\n      if (turnNo >= this.state.turnsAllowed) {\n        alert(`You're out of turns. :(`);\n      } else {\n      // turn object\n      /*\n      let turnObj = {\n        no:1,\n        guess: [],\n        answer: []\n        \n      }*/\n        this.setState({\n          turns:[\n            ...this.state.turns,\n            currTurn\n          ]\n        });\n      \n \n        //check for winner\n        const winner = ['red','red','red','red'];\n        //compares the winner array with the shuffledAnswer array\n        let isWinner = (array1, array2) => array1.length === array2.length && array1.sort().every((value, index) => value === array2[index])\n        \n        if (isWinner(winner,shuffledAnswer)) {\n          alert(`yay! You won in ${currTurn.no + 1} turn${currTurn.no === 0 ? '' : 's'}!`);\n        }\n      }\n    }\n    \n  }\n \n  compareArrays(solutionArr, guessArr) {\n    let responseArr = [];  \n    for (let i = 0; i <= 3; i++) {\n      //console.log(solutionArr.indexOf(guessArr[i]));\n      if (solutionArr.includes(guessArr[i]))  {\n        if (solutionArr[i] === guessArr[i]) {\n          responseArr.push('red');\n        } else {\n          responseArr.push('white')\n        }\n      } else {\n          responseArr.push('none');\n      }\n    }\n    return responseArr; \n  }\n \n  shuffleArray(arr) {\n    let i = arr.length;\n    while(--i > 0) {\n      let j = Math.floor(Math.random() * (i + 1));\n      // destructuring assignment\n      [arr[j], arr[i]] = [arr[i], arr[j]]; \n      // verbose assignment\n      /*\n      let temp = arr[j];\n      arr[j] = arr[i];\n      arr[i] = temp;\n      */\n    }\n    return arr;\n  }\n  resetGame() {\n    let self = this;\n    this.setState({\n      isNewGame:true,\n      solutionArr: [],\n      currGuess: {},\n      turns:[]\n    });\n    this.setSolutionArr();\n    setTimeout(function(){\n      self.setState({isNewGame:false})\n    },1000)\n    \n  }\n  showDiffOptions() {\n    this.setState({\n      showDiffOptions:!this.state.showDiffOptions\n    })\n  }\n  setDiffOptions(e) {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    let turns = data.get('turns');\n    let colors = data.get('colors');\n    let onlyNumbers = /[123456789]/;\n    if (colors < 1 || turns < 4 || !onlyNumbers.test(colors) || !onlyNumbers.test(turns)) {\n      alert('pick up to 8 colors and at least 4 turns');\n    } else {\n      this.setState({\n        turnsAllowed: turns,\n        noOfColors: colors,\n        showDiffOptions:!this.state.showDiffOptions\n      });\n      this.resetInputs();\n    }\n    this.resetGame(); \n  }\n  cancelDiffOptions() {\n    this.setState({showDiffOptions:!this.state.showDiffOptions})\n    this.resetInputs();\n  }\n  resetInputs() {\n    document.getElementsByName('colors')[0].value=\"\";\n    document.getElementsByName('turns')[0].value=\"\";\n  }\n \n  componentDidMount() {\n    let self = this;\n    this.setSolutionArr();\n    setTimeout(function(){\n      self.setState({isNewGame:false})\n    },1000)\n  }\n \n  render() {\n    return (\n      <div>\n        <div className={`modal ${this.state.showDiffOptions ? `` : `hidden` }`}>\n          <form onSubmit={this.setDiffOptions}>\n            # of colors ({this.state.noOfColors})<br />\n            <input name=\"colors\" ref={this.colorInput}></input>\n            <br/>\n            # of turns ({this.state.turnsAllowed})<br />\n            <input name=\"turns\" ref={this.turnsInput}></input>\n            <button>Submit</button>\n          </form>\n          <button onClick={this.cancelDiffOptions}>Cancel</button>\n        </div>\n        <div className=\"game\">\n            <h1 className={this.state.isNewGame === true ? `new-game` : ``}>Mastermind</h1>\n          <div className=\"button-container\">\n            <button onClick={this.resetGame}>New Game</button>\n            <button onClick={this.showDiffOptions}>difficulty</button>\n          </div>\n          {/*this.state.solutionArr.map(function(color,i) {\n            //return <li key={i}>{color}</li>\n          })*/}\n          <TurnsHistory turns={this.state.turns} />\n          <br />\n          <form onSubmit={this.submitGuess}>\n            {this.buildGuessOptions()}\n            <div style={{marginTop:\"20px\"}}>\n              <button>Submit Guess</button>\n            </div>\n          </form>\n        </div>\n        <br />\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}